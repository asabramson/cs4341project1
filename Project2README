Project 2 Documentation
____________________________________________________________________________________________________________________
1. Running Instructions:
    a. To run this program, first make sure that you have the cs4341-referee (pip install git+https://github.com/jake-molnia/cs4341-referee.git) and the Google Gemini integration package (pip install google-genai). Assure that the google genai package is installed globably, as the referee will not be able to access it through a virtual environment.
    b. Next run the referee program (https://github.com/jake-molnia/CS4341-referee) with the JD AI Player by running the command "cs4341-referee laskermorris -p1 "python jd_gemini.py" -p2 "python jd_gemini.py" --visual" in your terminal
        - Other players can be used by swapping out either 'jd_gemini.py' with the filename of another player
        - Alternate game configurations can be setup using the different commands detailed in the ref's README
____________________________________________________________________________________________________________________
2. System Integration
    a. Integration with the Gemini AI was done following the "Generate text from text-only input" and "Add system instructions" sections of this site: https://ai.google.dev/gemini-api/docs/text-generation?lang=python. By first configuring Gemini with instructions for Lasker Morris, instructing it how to play the game before asking it what move is best to make. The function make_lasker_morris_rules creates a string to send as the system instructions, first describing the rules of the game, giving all of the valid board spaces and their adjacencies, the format to give moves, and what color our player is. This prepares Gemini to then be given a game state and produce the best next move from it.
    b. The prompt given to Gemini each time we request a move from it is created in the make_gemini_prompt function. First it will tell Gemini how many stones are in each player's hand. It will then iterate over the game board and tell Gemini the contents of each space (blue, orange, or empty). Finally, it tells Gemini the move the opponent just made, and asks for the best next move to make.
    c. Extracting a move from Gemini's response is done with the extract_move_from_gemini function, which will return either the formatted move Gemini recommends, or None if it could not find a move from the response. It uses re.search to find text within parentheses, making sure that everything within those parentheses is captured. The information found is then split into three separate strings, and returned as a tuple to be easily used by the validate_move function.
    d. With a properly extracted move from Gemini's response, it is then validated in the validate_move function by checking against the list of possible moves generated from the generate_moves function, which lists all moves that can be made by the player in the given game state.
    e. If for whatever reason the program is not able to extract a valid move from Gemini's response, it will send the referee its 'fallback' move, being a random move from the list of possible moves.
____________________________________________________________________________________________________________________
3. Prompt Engineering
    a. System Instructions:
        "Hello! I was hoping you would be able to help me decide the best move option based on a given board state for the game Lasker Morris. The game is very similar to Nine Men's Morris, with the only real difference being that players can make adjacent moves with stones already on the board before exhausting all stones from their hand, where in Nine Men's Morris you must play all stones from your hand to be able to make adjacent moves from already placed stones. For our game, there are two players: blue and orange. The blue player will always make the first move. Each player starts with 10 stones in their hand and 0 on the board. Players take turns placing stones on the board, or moving pieaces already on the board to an adjacent open space. When a player forms 3 stones in a row, it forms a mill, and that player can remove one of the opponent's stones that are on the board and not in a mill. The game is won when a player reduces their oponent to only have 2 stones, or a tie occurs if there are 20 moves without a mill formed (game stalemate). When a player has only 3 pieces remaining, they can move to any open space, no longer limited to adjacent spaces. The game board is labeled with numbers 1 through 7 for each row (bottom row is row 1, top is row 7), and letters a through g for each column (leftmost column is column a, rightmost is column g). For example, the bottom left board space is 'a1' and the top right board space is 'g7'. The game board is configured as follows, giving the name of a legal space followed by the names of all spaces adjacent to it: "
        This is followed by a breakdown of the board spaces and their adjacency, formatted as "a1 is adjacent to d1, a4." for every space.
        Followed by: "After you decide the best move, you can present the move in the following format: (source, destination, removal). Source is the space that the piece is being moved from. If being placed from the hand, you can use 'h' instead of a space's coordinates. If we are the blue player, 'h1' should be used, and if we are the orange player, 'h2' should be used. Destination is the space that our piece is being moved to. Removal is the coordinates of the opponent piece that should be removed in the event that we form a mill. On turns where we do not form a mill, this should be left as 'r0' to signify no removal. Some examples of moves include: (h1 a1 r0), given we are the blue player, move a piece from our hand to space a1, do not remove an opponent piece, (h2 a1 r0), given we are the orange player, move a piece from our hand to space a1, do not remove an opponent piece, (a1 a4 r0), move a piece from a1 to a4, do not remove an opponent piece, (a4 a7 b2), given we form a mill from this move, move a piece from a4 to a7 and remove an opponent piece from b2. When outputting the best move, try to only output the move with as little else as possible so that the move can be processed as quickly as possible. Make sure to have the move as the first time that you print, as the referee needs to see it before any explanation. Please be aware that d4 is not a valid space, please do not place it there. "
        Finally followed with: "For this game, our player color is {} and the opponent is {}.".format(color, opponent_color)
    b. Each Move Prompt
        "Our player has {} pieces in hand and {} pieces on the board. The opponent has {} pieces in hand and {} pieces on the board. The following information describes each space and the color of the piece currently there, if neither player is occupying the space, None will be displayed. ".format(player_hand, player_pieces, opponent_hand, opponent_pieces)
        Followed by the state of each board space, formatted as "Space: a1 Current piece there: blue"
        Finally followed by: "The opponent's last move was {}".format(opp_move)
    c. Experimentation
        A small but integral piece of the prompt that we had to add after some testing was "Please be aware that d4 is not a valid space, please do not place it there." Even thought the AI player had access to the board and could see that d4 was not a valid move, it would try to start each round by placing there until we added this piece of the prompt.
____________________________________________________________________________________________________________________
4. Testing
    To test the integration of the Gemini AI with our program, it was tested against itself, our project 1 part 2 program, and a player that chooses moves randomly. The AI player was also tested against humans. These tests showed that the AI player could play competitively against most opponents, but did not always produce a strategicly smart move.
    Based on the development and testing of the Gemini AI to play Lasker Morris, our team believes that is not a great player because while it makes valid moves, these moves are not always the most stategic moves. Our prompt values the importance of forming mills and removing pieces that are close to opponent mills, but the final decision is left up to Gemini.